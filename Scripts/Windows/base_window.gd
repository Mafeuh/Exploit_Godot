extends Control

@onready var BackgroundTexture := $BackgroundTexture

@onready var WindowManager := $".."

@onready var TopLeftCollider := 		$BackgroundTexture/CollisionBoxes/TopLeft
@onready var TopCollider := 			$BackgroundTexture/CollisionBoxes/Top
@onready var TopRightCollider := 		$BackgroundTexture/CollisionBoxes/TopRight
@onready var RightCollider := 			$BackgroundTexture/CollisionBoxes/Right
@onready var BottomRightCollider := 	$BackgroundTexture/CollisionBoxes/BottomRight
@onready var BottomCollider := 			$BackgroundTexture/CollisionBoxes/Bottom
@onready var BottomLeftCollider := 		$BackgroundTexture/CollisionBoxes/BottomLeft
@onready var LeftCollider := 			$BackgroundTexture/CollisionBoxes/Left
@onready var DragCollider :=			$BackgroundTexture/CollisionBoxes/Drag


enum RESIZE_MODE {
	TOP_LEFT,
	TOP,
	TOP_RIGHT,
	RIGHT,
	BOTTOM_RIGHT,
	BOTTOM,
	BOTTOM_LEFT,
	LEFT,
	NONE
}

var mouse_left_down = false
var mouse_offset: Vector2

var moving_window := false

var resizing := false
var active_resize_mode = RESIZE_MODE.NONE

func _input(event):
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		if event.is_pressed():
			active_resize_mode = _detect_resize_mode()
			mouse_left_down = true
			
			if _collider_has_mouse(DragCollider) and not _collider_has_mouse(TopCollider) and not _collider_has_mouse(TopLeftCollider) and not _collider_has_mouse(TopRightCollider):
				moving_window = true
			
		else:
			mouse_left_down = false
			moving_window = false


func _resize_window():
	var new_size = BackgroundTexture.size
	
	var old_position = self.position
	var new_position = self.position
	
	match active_resize_mode:
		RESIZE_MODE.RIGHT:
			new_size = Vector2(get_local_mouse_position().x, new_size.y)
		RESIZE_MODE.BOTTOM:
			new_size = Vector2(new_size.x, get_local_mouse_position().y)
		RESIZE_MODE.LEFT:
			new_position = Vector2(get_global_mouse_position().x, new_position.y)
			new_size = Vector2(new_size.x + old_position.x - new_position.x, new_size.y)
		RESIZE_MODE.TOP:
			new_position = Vector2(new_position.x, get_global_mouse_position().y)
			new_size = Vector2(new_size.x, new_size.y + old_position.y - new_position.y)
		
		RESIZE_MODE.TOP_RIGHT:
			new_position = Vector2(new_position.x, get_global_mouse_position().y)
			new_size = Vector2(get_local_mouse_position().x, new_size.y + old_position.y - new_position.y)
		RESIZE_MODE.BOTTOM_RIGHT:
			new_size = Vector2(get_local_mouse_position().x, get_local_mouse_position().y)
		RESIZE_MODE.BOTTOM_LEFT:
			new_position = Vector2(get_global_mouse_position().x, new_position.y)
			new_size = Vector2(new_size.x + old_position.x - new_position.x, get_local_mouse_position().y)
		RESIZE_MODE.TOP_LEFT:
			new_position = Vector2(get_global_mouse_position().x, get_global_mouse_position().y)
			new_size = Vector2(new_size.x + old_position.x - new_position.x, new_size.y + old_position.y - new_position.y)
	
	self.position = new_position
	BackgroundTexture.size = new_size

func _process(delta: float) -> void:
	if mouse_left_down:
		_resize_window()
		if moving_window:
			_move_window()	
	else:
		mouse_offset = get_local_mouse_position()

func _move_window():
	var new_position = get_global_mouse_position() - mouse_offset	
	position = new_position

func _detect_resize_mode():
	# Check corners
	if _collider_has_mouse(TopLeftCollider):
		return RESIZE_MODE.TOP_LEFT
	if _collider_has_mouse(TopRightCollider):
		return RESIZE_MODE.TOP_RIGHT
	if _collider_has_mouse(BottomLeftCollider):
		return RESIZE_MODE.BOTTOM_LEFT
	if _collider_has_mouse(BottomRightCollider):
		return RESIZE_MODE.BOTTOM_RIGHT
	
	# Check sides
	if _collider_has_mouse(TopCollider):
		return RESIZE_MODE.TOP
	if _collider_has_mouse(RightCollider):
		return RESIZE_MODE.RIGHT
	if _collider_has_mouse(BottomCollider):
		return RESIZE_MODE.BOTTOM
	if _collider_has_mouse(LeftCollider):
		return RESIZE_MODE.LEFT
	
	return RESIZE_MODE.NONE
	
func _collider_has_mouse(collider: Control)->bool:
	return collider.get_rect().has_point(get_local_mouse_position())

func _close_window():
	WindowManager.remove_child(self)

func _maximize_window():
	position = Vector2(0, 0)
	BackgroundTexture.set_size(WindowManager.size)

func _minimize_window():
	OS.alert('Pranked!')
